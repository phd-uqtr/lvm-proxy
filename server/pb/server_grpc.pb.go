// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.19.6
// source: server/pb/server.proto

package server

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	VolumeGroup_GetVolumeGroupNames_FullMethodName = "/server.VolumeGroup/GetVolumeGroupNames"
	VolumeGroup_GetVolumeGroupInfo_FullMethodName  = "/server.VolumeGroup/GetVolumeGroupInfo"
)

// VolumeGroupClient is the client API for VolumeGroup service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VolumeGroupClient interface {
	GetVolumeGroupNames(ctx context.Context, in *GetVolumeGroupNamesRequest, opts ...grpc.CallOption) (*GetVolumeGroupNamesResponse, error)
	GetVolumeGroupInfo(ctx context.Context, in *GetVolumeGroupInfoRequest, opts ...grpc.CallOption) (*GetVolumeGroupInfoResponse, error)
}

type volumeGroupClient struct {
	cc grpc.ClientConnInterface
}

func NewVolumeGroupClient(cc grpc.ClientConnInterface) VolumeGroupClient {
	return &volumeGroupClient{cc}
}

func (c *volumeGroupClient) GetVolumeGroupNames(ctx context.Context, in *GetVolumeGroupNamesRequest, opts ...grpc.CallOption) (*GetVolumeGroupNamesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetVolumeGroupNamesResponse)
	err := c.cc.Invoke(ctx, VolumeGroup_GetVolumeGroupNames_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *volumeGroupClient) GetVolumeGroupInfo(ctx context.Context, in *GetVolumeGroupInfoRequest, opts ...grpc.CallOption) (*GetVolumeGroupInfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetVolumeGroupInfoResponse)
	err := c.cc.Invoke(ctx, VolumeGroup_GetVolumeGroupInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VolumeGroupServer is the server API for VolumeGroup service.
// All implementations must embed UnimplementedVolumeGroupServer
// for forward compatibility.
type VolumeGroupServer interface {
	GetVolumeGroupNames(context.Context, *GetVolumeGroupNamesRequest) (*GetVolumeGroupNamesResponse, error)
	GetVolumeGroupInfo(context.Context, *GetVolumeGroupInfoRequest) (*GetVolumeGroupInfoResponse, error)
	mustEmbedUnimplementedVolumeGroupServer()
}

// UnimplementedVolumeGroupServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedVolumeGroupServer struct{}

func (UnimplementedVolumeGroupServer) GetVolumeGroupNames(context.Context, *GetVolumeGroupNamesRequest) (*GetVolumeGroupNamesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVolumeGroupNames not implemented")
}
func (UnimplementedVolumeGroupServer) GetVolumeGroupInfo(context.Context, *GetVolumeGroupInfoRequest) (*GetVolumeGroupInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVolumeGroupInfo not implemented")
}
func (UnimplementedVolumeGroupServer) mustEmbedUnimplementedVolumeGroupServer() {}
func (UnimplementedVolumeGroupServer) testEmbeddedByValue()                     {}

// UnsafeVolumeGroupServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VolumeGroupServer will
// result in compilation errors.
type UnsafeVolumeGroupServer interface {
	mustEmbedUnimplementedVolumeGroupServer()
}

func RegisterVolumeGroupServer(s grpc.ServiceRegistrar, srv VolumeGroupServer) {
	// If the following call pancis, it indicates UnimplementedVolumeGroupServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&VolumeGroup_ServiceDesc, srv)
}

func _VolumeGroup_GetVolumeGroupNames_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVolumeGroupNamesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VolumeGroupServer).GetVolumeGroupNames(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VolumeGroup_GetVolumeGroupNames_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VolumeGroupServer).GetVolumeGroupNames(ctx, req.(*GetVolumeGroupNamesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VolumeGroup_GetVolumeGroupInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVolumeGroupInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VolumeGroupServer).GetVolumeGroupInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VolumeGroup_GetVolumeGroupInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VolumeGroupServer).GetVolumeGroupInfo(ctx, req.(*GetVolumeGroupInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// VolumeGroup_ServiceDesc is the grpc.ServiceDesc for VolumeGroup service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VolumeGroup_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "server.VolumeGroup",
	HandlerType: (*VolumeGroupServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetVolumeGroupNames",
			Handler:    _VolumeGroup_GetVolumeGroupNames_Handler,
		},
		{
			MethodName: "GetVolumeGroupInfo",
			Handler:    _VolumeGroup_GetVolumeGroupInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "server/pb/server.proto",
}

const (
	Volume_CreateVolume_FullMethodName  = "/server.Volume/CreateVolume"
	Volume_GetVolumes_FullMethodName    = "/server.Volume/GetVolumes"
	Volume_GetVolumeInfo_FullMethodName = "/server.Volume/GetVolumeInfo"
	Volume_DeleteVolume_FullMethodName  = "/server.Volume/DeleteVolume"
)

// VolumeClient is the client API for Volume service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VolumeClient interface {
	CreateVolume(ctx context.Context, in *CreateLVMVolumeRequest, opts ...grpc.CallOption) (*CreateLVMVolumeResponse, error)
	GetVolumes(ctx context.Context, in *GetVolumesRequest, opts ...grpc.CallOption) (*GetVolumesResponse, error)
	GetVolumeInfo(ctx context.Context, in *GetVolumeInfoRequest, opts ...grpc.CallOption) (*GetVolumeInfoResponse, error)
	DeleteVolume(ctx context.Context, in *DeleteVolumeRequest, opts ...grpc.CallOption) (*DeleteVolumeResponse, error)
}

type volumeClient struct {
	cc grpc.ClientConnInterface
}

func NewVolumeClient(cc grpc.ClientConnInterface) VolumeClient {
	return &volumeClient{cc}
}

func (c *volumeClient) CreateVolume(ctx context.Context, in *CreateLVMVolumeRequest, opts ...grpc.CallOption) (*CreateLVMVolumeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateLVMVolumeResponse)
	err := c.cc.Invoke(ctx, Volume_CreateVolume_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *volumeClient) GetVolumes(ctx context.Context, in *GetVolumesRequest, opts ...grpc.CallOption) (*GetVolumesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetVolumesResponse)
	err := c.cc.Invoke(ctx, Volume_GetVolumes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *volumeClient) GetVolumeInfo(ctx context.Context, in *GetVolumeInfoRequest, opts ...grpc.CallOption) (*GetVolumeInfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetVolumeInfoResponse)
	err := c.cc.Invoke(ctx, Volume_GetVolumeInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *volumeClient) DeleteVolume(ctx context.Context, in *DeleteVolumeRequest, opts ...grpc.CallOption) (*DeleteVolumeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteVolumeResponse)
	err := c.cc.Invoke(ctx, Volume_DeleteVolume_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VolumeServer is the server API for Volume service.
// All implementations must embed UnimplementedVolumeServer
// for forward compatibility.
type VolumeServer interface {
	CreateVolume(context.Context, *CreateLVMVolumeRequest) (*CreateLVMVolumeResponse, error)
	GetVolumes(context.Context, *GetVolumesRequest) (*GetVolumesResponse, error)
	GetVolumeInfo(context.Context, *GetVolumeInfoRequest) (*GetVolumeInfoResponse, error)
	DeleteVolume(context.Context, *DeleteVolumeRequest) (*DeleteVolumeResponse, error)
	mustEmbedUnimplementedVolumeServer()
}

// UnimplementedVolumeServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedVolumeServer struct{}

func (UnimplementedVolumeServer) CreateVolume(context.Context, *CreateLVMVolumeRequest) (*CreateLVMVolumeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateVolume not implemented")
}
func (UnimplementedVolumeServer) GetVolumes(context.Context, *GetVolumesRequest) (*GetVolumesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVolumes not implemented")
}
func (UnimplementedVolumeServer) GetVolumeInfo(context.Context, *GetVolumeInfoRequest) (*GetVolumeInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVolumeInfo not implemented")
}
func (UnimplementedVolumeServer) DeleteVolume(context.Context, *DeleteVolumeRequest) (*DeleteVolumeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteVolume not implemented")
}
func (UnimplementedVolumeServer) mustEmbedUnimplementedVolumeServer() {}
func (UnimplementedVolumeServer) testEmbeddedByValue()                {}

// UnsafeVolumeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VolumeServer will
// result in compilation errors.
type UnsafeVolumeServer interface {
	mustEmbedUnimplementedVolumeServer()
}

func RegisterVolumeServer(s grpc.ServiceRegistrar, srv VolumeServer) {
	// If the following call pancis, it indicates UnimplementedVolumeServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Volume_ServiceDesc, srv)
}

func _Volume_CreateVolume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateLVMVolumeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VolumeServer).CreateVolume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Volume_CreateVolume_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VolumeServer).CreateVolume(ctx, req.(*CreateLVMVolumeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Volume_GetVolumes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVolumesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VolumeServer).GetVolumes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Volume_GetVolumes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VolumeServer).GetVolumes(ctx, req.(*GetVolumesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Volume_GetVolumeInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVolumeInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VolumeServer).GetVolumeInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Volume_GetVolumeInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VolumeServer).GetVolumeInfo(ctx, req.(*GetVolumeInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Volume_DeleteVolume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteVolumeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VolumeServer).DeleteVolume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Volume_DeleteVolume_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VolumeServer).DeleteVolume(ctx, req.(*DeleteVolumeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Volume_ServiceDesc is the grpc.ServiceDesc for Volume service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Volume_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "server.Volume",
	HandlerType: (*VolumeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateVolume",
			Handler:    _Volume_CreateVolume_Handler,
		},
		{
			MethodName: "GetVolumes",
			Handler:    _Volume_GetVolumes_Handler,
		},
		{
			MethodName: "GetVolumeInfo",
			Handler:    _Volume_GetVolumeInfo_Handler,
		},
		{
			MethodName: "DeleteVolume",
			Handler:    _Volume_DeleteVolume_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "server/pb/server.proto",
}
